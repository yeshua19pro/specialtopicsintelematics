// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gridmr.proto

#include "gridmr.pb.h"
#include "gridmr.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gridmr {

static const char* MapReduceService_method_names[] = {
  "/gridmr.MapReduceService/SubmitJob",
  "/gridmr.MapReduceService/RegisterWorker",
  "/gridmr.MapReduceService/GetTask",
  "/gridmr.MapReduceService/SubmitTaskResult",
};

std::unique_ptr< MapReduceService::Stub> MapReduceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MapReduceService::Stub> stub(new MapReduceService::Stub(channel, options));
  return stub;
}

MapReduceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitJob_(MapReduceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterWorker_(MapReduceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTask_(MapReduceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitTaskResult_(MapReduceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MapReduceService::Stub::SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::gridmr::JobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gridmr::JobRequest, ::gridmr::JobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitJob_, context, request, response);
}

void MapReduceService::Stub::async::SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gridmr::JobRequest, ::gridmr::JobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitJob_, context, request, response, std::move(f));
}

void MapReduceService::Stub::async::SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>* MapReduceService::Stub::PrepareAsyncSubmitJobRaw(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gridmr::JobResponse, ::gridmr::JobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>* MapReduceService::Stub::AsyncSubmitJobRaw(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapReduceService::Stub::RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::gridmr::WorkerRegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterWorker_, context, request, response);
}

void MapReduceService::Stub::async::RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterWorker_, context, request, response, std::move(f));
}

void MapReduceService::Stub::async::RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>* MapReduceService::Stub::PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gridmr::WorkerRegistrationResponse, ::gridmr::WorkerRegistrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterWorker_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>* MapReduceService::Stub::AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterWorkerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapReduceService::Stub::GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::gridmr::TaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gridmr::TaskRequest, ::gridmr::TaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

void MapReduceService::Stub::async::GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gridmr::TaskRequest, ::gridmr::TaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void MapReduceService::Stub::async::GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>* MapReduceService::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gridmr::TaskResponse, ::gridmr::TaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>* MapReduceService::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapReduceService::Stub::SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::gridmr::TaskResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gridmr::TaskResult, ::gridmr::TaskResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTaskResult_, context, request, response);
}

void MapReduceService::Stub::async::SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gridmr::TaskResult, ::gridmr::TaskResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTaskResult_, context, request, response, std::move(f));
}

void MapReduceService::Stub::async::SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTaskResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>* MapReduceService::Stub::PrepareAsyncSubmitTaskResultRaw(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gridmr::TaskResultResponse, ::gridmr::TaskResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitTaskResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>* MapReduceService::Stub::AsyncSubmitTaskResultRaw(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTaskResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

MapReduceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapReduceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapReduceService::Service, ::gridmr::JobRequest, ::gridmr::JobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapReduceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridmr::JobRequest* req,
             ::gridmr::JobResponse* resp) {
               return service->SubmitJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapReduceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapReduceService::Service, ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapReduceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridmr::WorkerRegistrationRequest* req,
             ::gridmr::WorkerRegistrationResponse* resp) {
               return service->RegisterWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapReduceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapReduceService::Service, ::gridmr::TaskRequest, ::gridmr::TaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapReduceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridmr::TaskRequest* req,
             ::gridmr::TaskResponse* resp) {
               return service->GetTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapReduceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapReduceService::Service, ::gridmr::TaskResult, ::gridmr::TaskResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapReduceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridmr::TaskResult* req,
             ::gridmr::TaskResultResponse* resp) {
               return service->SubmitTaskResult(ctx, req, resp);
             }, this)));
}

MapReduceService::Service::~Service() {
}

::grpc::Status MapReduceService::Service::SubmitJob(::grpc::ServerContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapReduceService::Service::RegisterWorker(::grpc::ServerContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapReduceService::Service::GetTask(::grpc::ServerContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapReduceService::Service::SubmitTaskResult(::grpc::ServerContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DataTransferService_method_names[] = {
  "/gridmr.DataTransferService/ReceiveFile",
  "/gridmr.DataTransferService/SendFile",
};

std::unique_ptr< DataTransferService::Stub> DataTransferService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataTransferService::Stub> stub(new DataTransferService::Stub(channel, options));
  return stub;
}

DataTransferService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReceiveFile_(DataTransferService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendFile_(DataTransferService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReader< ::gridmr::FileChunk>* DataTransferService::Stub::ReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::gridmr::FileChunk>::Create(channel_.get(), rpcmethod_ReceiveFile_, context, request);
}

void DataTransferService::Stub::async::ReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest* request, ::grpc::ClientReadReactor< ::gridmr::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::gridmr::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_ReceiveFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::gridmr::FileChunk>* DataTransferService::Stub::AsyncReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gridmr::FileChunk>::Create(channel_.get(), cq, rpcmethod_ReceiveFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gridmr::FileChunk>* DataTransferService::Stub::PrepareAsyncReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gridmr::FileChunk>::Create(channel_.get(), cq, rpcmethod_ReceiveFile_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::gridmr::FileChunk>* DataTransferService::Stub::SendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::gridmr::FileChunk>::Create(channel_.get(), rpcmethod_SendFile_, context, response);
}

void DataTransferService::Stub::async::SendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::ClientWriteReactor< ::gridmr::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::gridmr::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_SendFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::gridmr::FileChunk>* DataTransferService::Stub::AsyncSendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gridmr::FileChunk>::Create(channel_.get(), cq, rpcmethod_SendFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::gridmr::FileChunk>* DataTransferService::Stub::PrepareAsyncSendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::gridmr::FileChunk>::Create(channel_.get(), cq, rpcmethod_SendFile_, context, response, false, nullptr);
}

DataTransferService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataTransferService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DataTransferService::Service, ::gridmr::ReceiveFileRequest, ::gridmr::FileChunk>(
          [](DataTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridmr::ReceiveFileRequest* req,
             ::grpc::ServerWriter<::gridmr::FileChunk>* writer) {
               return service->ReceiveFile(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataTransferService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< DataTransferService::Service, ::gridmr::FileChunk, ::gridmr::SendFileResponse>(
          [](DataTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::gridmr::FileChunk>* reader,
             ::gridmr::SendFileResponse* resp) {
               return service->SendFile(ctx, reader, resp);
             }, this)));
}

DataTransferService::Service::~Service() {
}

::grpc::Status DataTransferService::Service::ReceiveFile(::grpc::ServerContext* context, const ::gridmr::ReceiveFileRequest* request, ::grpc::ServerWriter< ::gridmr::FileChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataTransferService::Service::SendFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::gridmr::FileChunk>* reader, ::gridmr::SendFileResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gridmr

