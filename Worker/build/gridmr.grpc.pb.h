// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gridmr.proto
#ifndef GRPC_gridmr_2eproto__INCLUDED
#define GRPC_gridmr_2eproto__INCLUDED

#include "gridmr.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gridmr {

class MapReduceService final {
 public:
  static constexpr char const* service_full_name() {
    return "gridmr.MapReduceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::gridmr::JobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::JobResponse>> AsyncSubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::JobResponse>>(AsyncSubmitJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::JobResponse>> PrepareAsyncSubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::JobResponse>>(PrepareAsyncSubmitJobRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::gridmr::WorkerRegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::WorkerRegistrationResponse>> AsyncRegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::WorkerRegistrationResponse>>(AsyncRegisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::WorkerRegistrationResponse>> PrepareAsyncRegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::WorkerRegistrationResponse>>(PrepareAsyncRegisterWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::gridmr::TaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::gridmr::TaskResultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResultResponse>> AsyncSubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResultResponse>>(AsyncSubmitTaskResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResultResponse>> PrepareAsyncSubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResultResponse>>(PrepareAsyncSubmitTaskResultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::JobResponse>* AsyncSubmitJobRaw(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::JobResponse>* PrepareAsyncSubmitJobRaw(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::WorkerRegistrationResponse>* AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::WorkerRegistrationResponse>* PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResultResponse>* AsyncSubmitTaskResultRaw(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gridmr::TaskResultResponse>* PrepareAsyncSubmitTaskResultRaw(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::gridmr::JobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>> AsyncSubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>>(AsyncSubmitJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>> PrepareAsyncSubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>>(PrepareAsyncSubmitJobRaw(context, request, cq));
    }
    ::grpc::Status RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::gridmr::WorkerRegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>> AsyncRegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>>(AsyncRegisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>> PrepareAsyncRegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>>(PrepareAsyncRegisterWorkerRaw(context, request, cq));
    }
    ::grpc::Status GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::gridmr::TaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    ::grpc::Status SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::gridmr::TaskResultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>> AsyncSubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>>(AsyncSubmitTaskResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>> PrepareAsyncSubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>>(PrepareAsyncSubmitTaskResultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitJob(::grpc::ClientContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterWorker(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTask(::grpc::ClientContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitTaskResult(::grpc::ClientContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>* AsyncSubmitJobRaw(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridmr::JobResponse>* PrepareAsyncSubmitJobRaw(::grpc::ClientContext* context, const ::gridmr::JobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>* AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridmr::WorkerRegistrationResponse>* PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::gridmr::WorkerRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::gridmr::TaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>* AsyncSubmitTaskResultRaw(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gridmr::TaskResultResponse>* PrepareAsyncSubmitTaskResultRaw(::grpc::ClientContext* context, const ::gridmr::TaskResult& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitJob_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterWorker_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTask_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitTaskResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubmitJob(::grpc::ServerContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response);
    virtual ::grpc::Status RegisterWorker(::grpc::ServerContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response);
    virtual ::grpc::Status GetTask(::grpc::ServerContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response);
    virtual ::grpc::Status SubmitTaskResult(::grpc::ServerContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitJob() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* /*context*/, const ::gridmr::JobRequest* /*request*/, ::gridmr::JobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitJob(::grpc::ServerContext* context, ::gridmr::JobRequest* request, ::grpc::ServerAsyncResponseWriter< ::gridmr::JobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::gridmr::WorkerRegistrationRequest* /*request*/, ::gridmr::WorkerRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterWorker(::grpc::ServerContext* context, ::gridmr::WorkerRegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::gridmr::WorkerRegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTask() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::gridmr::TaskRequest* /*request*/, ::gridmr::TaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::gridmr::TaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::gridmr::TaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitTaskResult() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubmitTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTaskResult(::grpc::ServerContext* /*context*/, const ::gridmr::TaskResult* /*request*/, ::gridmr::TaskResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTaskResult(::grpc::ServerContext* context, ::gridmr::TaskResult* request, ::grpc::ServerAsyncResponseWriter< ::gridmr::TaskResultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitJob<WithAsyncMethod_RegisterWorker<WithAsyncMethod_GetTask<WithAsyncMethod_SubmitTaskResult<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitJob() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gridmr::JobRequest, ::gridmr::JobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridmr::JobRequest* request, ::gridmr::JobResponse* response) { return this->SubmitJob(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitJob(
        ::grpc::MessageAllocator< ::gridmr::JobRequest, ::gridmr::JobResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gridmr::JobRequest, ::gridmr::JobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* /*context*/, const ::gridmr::JobRequest* /*request*/, ::gridmr::JobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitJob(
      ::grpc::CallbackServerContext* /*context*/, const ::gridmr::JobRequest* /*request*/, ::gridmr::JobResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridmr::WorkerRegistrationRequest* request, ::gridmr::WorkerRegistrationResponse* response) { return this->RegisterWorker(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterWorker(
        ::grpc::MessageAllocator< ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::gridmr::WorkerRegistrationRequest* /*request*/, ::gridmr::WorkerRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::gridmr::WorkerRegistrationRequest* /*request*/, ::gridmr::WorkerRegistrationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gridmr::TaskRequest, ::gridmr::TaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridmr::TaskRequest* request, ::gridmr::TaskResponse* response) { return this->GetTask(context, request, response); }));}
    void SetMessageAllocatorFor_GetTask(
        ::grpc::MessageAllocator< ::gridmr::TaskRequest, ::gridmr::TaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gridmr::TaskRequest, ::gridmr::TaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::gridmr::TaskRequest* /*request*/, ::gridmr::TaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::gridmr::TaskRequest* /*request*/, ::gridmr::TaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitTaskResult() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gridmr::TaskResult, ::gridmr::TaskResultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridmr::TaskResult* request, ::gridmr::TaskResultResponse* response) { return this->SubmitTaskResult(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitTaskResult(
        ::grpc::MessageAllocator< ::gridmr::TaskResult, ::gridmr::TaskResultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gridmr::TaskResult, ::gridmr::TaskResultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTaskResult(::grpc::ServerContext* /*context*/, const ::gridmr::TaskResult* /*request*/, ::gridmr::TaskResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitTaskResult(
      ::grpc::CallbackServerContext* /*context*/, const ::gridmr::TaskResult* /*request*/, ::gridmr::TaskResultResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubmitJob<WithCallbackMethod_RegisterWorker<WithCallbackMethod_GetTask<WithCallbackMethod_SubmitTaskResult<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitJob() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* /*context*/, const ::gridmr::JobRequest* /*request*/, ::gridmr::JobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::gridmr::WorkerRegistrationRequest* /*request*/, ::gridmr::WorkerRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTask() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::gridmr::TaskRequest* /*request*/, ::gridmr::TaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitTaskResult() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubmitTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTaskResult(::grpc::ServerContext* /*context*/, const ::gridmr::TaskResult* /*request*/, ::gridmr::TaskResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitJob() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* /*context*/, const ::gridmr::JobRequest* /*request*/, ::gridmr::JobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::gridmr::WorkerRegistrationRequest* /*request*/, ::gridmr::WorkerRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterWorker(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTask() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::gridmr::TaskRequest* /*request*/, ::gridmr::TaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitTaskResult() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubmitTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTaskResult(::grpc::ServerContext* /*context*/, const ::gridmr::TaskResult* /*request*/, ::gridmr::TaskResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTaskResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitJob() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* /*context*/, const ::gridmr::JobRequest* /*request*/, ::gridmr::JobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterWorker(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::gridmr::WorkerRegistrationRequest* /*request*/, ::gridmr::WorkerRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::gridmr::TaskRequest* /*request*/, ::gridmr::TaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitTaskResult() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitTaskResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTaskResult(::grpc::ServerContext* /*context*/, const ::gridmr::TaskResult* /*request*/, ::gridmr::TaskResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitTaskResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitJob() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gridmr::JobRequest, ::gridmr::JobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gridmr::JobRequest, ::gridmr::JobResponse>* streamer) {
                       return this->StreamedSubmitJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* /*context*/, const ::gridmr::JobRequest* /*request*/, ::gridmr::JobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gridmr::JobRequest,::gridmr::JobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gridmr::WorkerRegistrationRequest, ::gridmr::WorkerRegistrationResponse>* streamer) {
                       return this->StreamedRegisterWorker(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::gridmr::WorkerRegistrationRequest* /*request*/, ::gridmr::WorkerRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gridmr::WorkerRegistrationRequest,::gridmr::WorkerRegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTask() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gridmr::TaskRequest, ::gridmr::TaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gridmr::TaskRequest, ::gridmr::TaskResponse>* streamer) {
                       return this->StreamedGetTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::gridmr::TaskRequest* /*request*/, ::gridmr::TaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gridmr::TaskRequest,::gridmr::TaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitTaskResult() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gridmr::TaskResult, ::gridmr::TaskResultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gridmr::TaskResult, ::gridmr::TaskResultResponse>* streamer) {
                       return this->StreamedSubmitTaskResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitTaskResult(::grpc::ServerContext* /*context*/, const ::gridmr::TaskResult* /*request*/, ::gridmr::TaskResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitTaskResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gridmr::TaskResult,::gridmr::TaskResultResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitJob<WithStreamedUnaryMethod_RegisterWorker<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_SubmitTaskResult<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitJob<WithStreamedUnaryMethod_RegisterWorker<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_SubmitTaskResult<Service > > > > StreamedService;
};

// Service for data transfer between nodes
class DataTransferService final {
 public:
  static constexpr char const* service_full_name() {
    return "gridmr.DataTransferService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gridmr::FileChunk>> ReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gridmr::FileChunk>>(ReceiveFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridmr::FileChunk>> AsyncReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridmr::FileChunk>>(AsyncReceiveFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridmr::FileChunk>> PrepareAsyncReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gridmr::FileChunk>>(PrepareAsyncReceiveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::gridmr::FileChunk>> SendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::gridmr::FileChunk>>(SendFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridmr::FileChunk>> AsyncSendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridmr::FileChunk>>(AsyncSendFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridmr::FileChunk>> PrepareAsyncSendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gridmr::FileChunk>>(PrepareAsyncSendFileRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest* request, ::grpc::ClientReadReactor< ::gridmr::FileChunk>* reactor) = 0;
      virtual void SendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::ClientWriteReactor< ::gridmr::FileChunk>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::gridmr::FileChunk>* ReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gridmr::FileChunk>* AsyncReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gridmr::FileChunk>* PrepareAsyncReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::gridmr::FileChunk>* SendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gridmr::FileChunk>* AsyncSendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gridmr::FileChunk>* PrepareAsyncSendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::gridmr::FileChunk>> ReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gridmr::FileChunk>>(ReceiveFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gridmr::FileChunk>> AsyncReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gridmr::FileChunk>>(AsyncReceiveFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gridmr::FileChunk>> PrepareAsyncReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gridmr::FileChunk>>(PrepareAsyncReceiveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::gridmr::FileChunk>> SendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::gridmr::FileChunk>>(SendFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridmr::FileChunk>> AsyncSendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridmr::FileChunk>>(AsyncSendFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridmr::FileChunk>> PrepareAsyncSendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gridmr::FileChunk>>(PrepareAsyncSendFileRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReceiveFile(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest* request, ::grpc::ClientReadReactor< ::gridmr::FileChunk>* reactor) override;
      void SendFile(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::ClientWriteReactor< ::gridmr::FileChunk>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::gridmr::FileChunk>* ReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request) override;
    ::grpc::ClientAsyncReader< ::gridmr::FileChunk>* AsyncReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::gridmr::FileChunk>* PrepareAsyncReceiveFileRaw(::grpc::ClientContext* context, const ::gridmr::ReceiveFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::gridmr::FileChunk>* SendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response) override;
    ::grpc::ClientAsyncWriter< ::gridmr::FileChunk>* AsyncSendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::gridmr::FileChunk>* PrepareAsyncSendFileRaw(::grpc::ClientContext* context, ::gridmr::SendFileResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveFile_;
    const ::grpc::internal::RpcMethod rpcmethod_SendFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReceiveFile(::grpc::ServerContext* context, const ::gridmr::ReceiveFileRequest* request, ::grpc::ServerWriter< ::gridmr::FileChunk>* writer);
    virtual ::grpc::Status SendFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::gridmr::FileChunk>* reader, ::gridmr::SendFileResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReceiveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveFile(::grpc::ServerContext* /*context*/, const ::gridmr::ReceiveFileRequest* /*request*/, ::grpc::ServerWriter< ::gridmr::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveFile(::grpc::ServerContext* context, ::gridmr::ReceiveFileRequest* request, ::grpc::ServerAsyncWriter< ::gridmr::FileChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridmr::FileChunk>* /*reader*/, ::gridmr::SendFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::gridmr::SendFileResponse, ::gridmr::FileChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReceiveFile<WithAsyncMethod_SendFile<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReceiveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::gridmr::ReceiveFileRequest, ::gridmr::FileChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gridmr::ReceiveFileRequest* request) { return this->ReceiveFile(context, request); }));
    }
    ~WithCallbackMethod_ReceiveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveFile(::grpc::ServerContext* /*context*/, const ::gridmr::ReceiveFileRequest* /*request*/, ::grpc::ServerWriter< ::gridmr::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::gridmr::FileChunk>* ReceiveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::gridmr::ReceiveFileRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::gridmr::FileChunk, ::gridmr::SendFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::gridmr::SendFileResponse* response) { return this->SendFile(context, response); }));
    }
    ~WithCallbackMethod_SendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridmr::FileChunk>* /*reader*/, ::gridmr::SendFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::gridmr::FileChunk>* SendFile(
      ::grpc::CallbackServerContext* /*context*/, ::gridmr::SendFileResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReceiveFile<WithCallbackMethod_SendFile<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReceiveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReceiveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveFile(::grpc::ServerContext* /*context*/, const ::gridmr::ReceiveFileRequest* /*request*/, ::grpc::ServerWriter< ::gridmr::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridmr::FileChunk>* /*reader*/, ::gridmr::SendFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReceiveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveFile(::grpc::ServerContext* /*context*/, const ::gridmr::ReceiveFileRequest* /*request*/, ::grpc::ServerWriter< ::gridmr::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridmr::FileChunk>* /*reader*/, ::gridmr::SendFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReceiveFile(context, request); }));
    }
    ~WithRawCallbackMethod_ReceiveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveFile(::grpc::ServerContext* /*context*/, const ::gridmr::ReceiveFileRequest* /*request*/, ::grpc::ServerWriter< ::gridmr::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReceiveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendFile(context, response); }));
    }
    ~WithRawCallbackMethod_SendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gridmr::FileChunk>* /*reader*/, ::gridmr::SendFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendFile(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReceiveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReceiveFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::gridmr::ReceiveFileRequest, ::gridmr::FileChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::gridmr::ReceiveFileRequest, ::gridmr::FileChunk>* streamer) {
                       return this->StreamedReceiveFile(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReceiveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveFile(::grpc::ServerContext* /*context*/, const ::gridmr::ReceiveFileRequest* /*request*/, ::grpc::ServerWriter< ::gridmr::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReceiveFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::gridmr::ReceiveFileRequest,::gridmr::FileChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReceiveFile<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_ReceiveFile<Service > StreamedService;
};

}  // namespace gridmr


#endif  // GRPC_gridmr_2eproto__INCLUDED
