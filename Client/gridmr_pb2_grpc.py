# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import gridmr_pb2 as gridmr__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gridmr_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MapReduceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitJob = channel.unary_unary(
                '/gridmr.MapReduceService/SubmitJob',
                request_serializer=gridmr__pb2.JobRequest.SerializeToString,
                response_deserializer=gridmr__pb2.JobResponse.FromString,
                _registered_method=True)
        self.RegisterWorker = channel.unary_unary(
                '/gridmr.MapReduceService/RegisterWorker',
                request_serializer=gridmr__pb2.WorkerRegistrationRequest.SerializeToString,
                response_deserializer=gridmr__pb2.WorkerRegistrationResponse.FromString,
                _registered_method=True)
        self.GetTask = channel.unary_unary(
                '/gridmr.MapReduceService/GetTask',
                request_serializer=gridmr__pb2.TaskRequest.SerializeToString,
                response_deserializer=gridmr__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.SubmitTaskResult = channel.unary_unary(
                '/gridmr.MapReduceService/SubmitTaskResult',
                request_serializer=gridmr__pb2.TaskResult.SerializeToString,
                response_deserializer=gridmr__pb2.TaskResultResponse.FromString,
                _registered_method=True)


class MapReduceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTaskResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapReduceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=gridmr__pb2.JobRequest.FromString,
                    response_serializer=gridmr__pb2.JobResponse.SerializeToString,
            ),
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=gridmr__pb2.WorkerRegistrationRequest.FromString,
                    response_serializer=gridmr__pb2.WorkerRegistrationResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=gridmr__pb2.TaskRequest.FromString,
                    response_serializer=gridmr__pb2.TaskResponse.SerializeToString,
            ),
            'SubmitTaskResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTaskResult,
                    request_deserializer=gridmr__pb2.TaskResult.FromString,
                    response_serializer=gridmr__pb2.TaskResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gridmr.MapReduceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gridmr.MapReduceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MapReduceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gridmr.MapReduceService/SubmitJob',
            gridmr__pb2.JobRequest.SerializeToString,
            gridmr__pb2.JobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gridmr.MapReduceService/RegisterWorker',
            gridmr__pb2.WorkerRegistrationRequest.SerializeToString,
            gridmr__pb2.WorkerRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gridmr.MapReduceService/GetTask',
            gridmr__pb2.TaskRequest.SerializeToString,
            gridmr__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gridmr.MapReduceService/SubmitTaskResult',
            gridmr__pb2.TaskResult.SerializeToString,
            gridmr__pb2.TaskResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DataTransferServiceStub(object):
    """Service for data transfer between nodes
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReceiveFile = channel.unary_stream(
                '/gridmr.DataTransferService/ReceiveFile',
                request_serializer=gridmr__pb2.ReceiveFileRequest.SerializeToString,
                response_deserializer=gridmr__pb2.FileChunk.FromString,
                _registered_method=True)
        self.SendFile = channel.stream_unary(
                '/gridmr.DataTransferService/SendFile',
                request_serializer=gridmr__pb2.FileChunk.SerializeToString,
                response_deserializer=gridmr__pb2.SendFileResponse.FromString,
                _registered_method=True)


class DataTransferServiceServicer(object):
    """Service for data transfer between nodes
    """

    def ReceiveFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReceiveFile': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveFile,
                    request_deserializer=gridmr__pb2.ReceiveFileRequest.FromString,
                    response_serializer=gridmr__pb2.FileChunk.SerializeToString,
            ),
            'SendFile': grpc.stream_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=gridmr__pb2.FileChunk.FromString,
                    response_serializer=gridmr__pb2.SendFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gridmr.DataTransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gridmr.DataTransferService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataTransferService(object):
    """Service for data transfer between nodes
    """

    @staticmethod
    def ReceiveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/gridmr.DataTransferService/ReceiveFile',
            gridmr__pb2.ReceiveFileRequest.SerializeToString,
            gridmr__pb2.FileChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/gridmr.DataTransferService/SendFile',
            gridmr__pb2.FileChunk.SerializeToString,
            gridmr__pb2.SendFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
